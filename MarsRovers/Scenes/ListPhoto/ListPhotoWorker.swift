//
//  ListPhotoWorker.swift
//  MarsRovers
//
//  Created by Henrique Velloso on 06/03/19.
//  Copyright (c) 2019 Henrique Velloso. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ListPhotoWorker
{
    func fetchPhotos(roverName:String, earthDate:String, completionHandler: @escaping ([Photo]) -> Void) {
        
        var hasPhotos = false
        var isRunning = false
        var dateCount = 0
        
        
        while !hasPhotos {
            
            var date = Date()
            let formatter = DateFormatter()
            formatter.dateFormat = "yyyy-MM-dd"
            
            if roverName.lowercased() == Rovers.Spirit.rawValue.lowercased() {
                date = formatter.date(from: "2010-03-21")! //Last picture taken
            } else if roverName.lowercased() == Rovers.Opportunity.rawValue.lowercased() {
                date = formatter.date(from: "2018-06-11")! //Last picture taken
            }
            
            if earthDate != "" {
                 date = formatter.date(from: earthDate)!
            }

            let dateEnding = Calendar.current.date(byAdding: .day, value: dateCount, to: date as Date)!
            let dateStr = formatter.string(from: dateEnding)
            print(dateStr)
            
            if isRunning == false && hasPhotos == false {
                
                isRunning = true
                NetworkManager.shared.fetchPhotos(roverName: roverName, earthDate: dateStr) { (photos, error) in
                    
                    if let photo = photos {
                        if photo.count > 0 {
                            hasPhotos = true
                            completionHandler(photo)
                        } else {
                            dateCount = dateCount - 1
                            hasPhotos = false
                            completionHandler([Photo]())
                        }
                    }
                    isRunning = false
                }
            }
            
        }
    }
}


// MARK: - store operation errors

enum PhotosStoreError: Equatable, Error
{
    case CannotFetch(String)
    case CannotCreate(String)
    case CannotUpdate(String)
    case CannotDelete(String)
}

func ==(lhs: PhotosStoreError, rhs: PhotosStoreError) -> Bool
{
    switch (lhs, rhs) {
    case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
    case (.CannotCreate(let a), .CannotCreate(let b)) where a == b: return true
    case (.CannotUpdate(let a), .CannotUpdate(let b)) where a == b: return true
    case (.CannotDelete(let a), .CannotDelete(let b)) where a == b: return true
    default: return false
    }
}
