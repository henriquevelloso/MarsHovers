//
//  ListPhotoViewController.swift
//  MarsRovers
//
//  Created by Henrique Velloso on 06/03/19.
//  Copyright (c) 2019 Henrique Velloso. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPhotoDisplayLogic: class
{
    func displaySomething(viewModel: ListPhoto.Something.ViewModel)
}

class ListPhotoViewController: UIViewController
{
    //MARK: Outlets
    
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var roversSegmentedControl: UISegmentedControl!
    
    
    //MARK: Properties
    var interactor: ListPhotoBusinessLogic?
    var router: (NSObjectProtocol & ListPhotoRoutingLogic & ListPhotoDataPassing)?
    var photos  = [Photo]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListPhotoInteractor()
        let presenter = ListPhotoPresenter()
        let router = ListPhotoRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = ListPhoto.Something.Request()
        interactor?.doSomething(request: request)
        
        self.collectionView.reloadData()
    }
    
}


//MARK: - ListPhotoDisplayLogic 
extension ListPhotoViewController: ListPhotoDisplayLogic {
    
    func displaySomething(viewModel: ListPhoto.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

//MARK: - UICollectionViewDataSource
extension ListPhotoViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.photos.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "PhotoCollectionCell", for: indexPath) as! PhotoCollectionViewCell
        
        return cell
    }
    
    
}

//MARK: - UICollectionViewDelegate
extension ListPhotoViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let side = (UIScreen.main.bounds.width - 26) / 2
        return CGSize(width: side, height: side)
    }
    
}

//MARK: - UICollectionViewDelegateFlowLayout
extension ListPhotoViewController: UICollectionViewDelegateFlowLayout {
    
}
